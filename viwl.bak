#!/bin/bash

work_dir="${HOME}/.dicelessware"
tmp_file="${tmp_dir}/word_list.tmp.$( date --iso-8601=seconds ).txt"
list_file="${work_dir}/custom_list.txt"


function main {
  while test 'set' == "${1:+set}"; do
    case "${1}" in
      '-f')
        shift
        list_file="${1}"
        shift
        ;;
      *)
        fail "Unrecognized argument:  '${1}'"
        ;;
    esac
  done

  if ! cp "${list_file}" "${tmp_file}"; then
    ret="${?}"
    error "Failed to copy:  '${list_file}'"
    fail "... to:  '${tmp_file}'" "${ret}"
  fi

  

  while
    "${VISUAL:-${EDITOR:-vi}}" "${tmp_file}" || fail "${EDITOR} returned:  '${?}'"
    ! verify "${tmp_file}"
  do
    ask "Try again?  [Yn]" response
    if grep -iq '^n' <<< "${response}"; then
      fail "Giving up."
    fi
  done

  cat "${tmp_file}" > "${list_file}" || fail "Failed to write list file:  '${list_file}'"
  rm "${tmp_file}" || warn "Failed to remove tmp file:  '${tmp_file}'"
}


function verify {
  tmp_file="${1}"
  ret=0

  line_count="$( wc -l < "${tmp_file}" )"

  if ! grep -qE '^7776$|^1296$' <<< "${line_count}"; then
    error "Wrong number of lines:  '${line_count}'"
    ret=2
  fi

  duplicates="$(
    sed -E 's/[0-9]{5}\s*//' "${tmp_file}" \
    | uniq -D \
    | grep .
  )"
  occurrences="$(
    wc -l <<< "${duplicates}"
  )"
  duplicate_count="$(
    uniq <<< "${duplicates}" \
    | grep . \
    | wc -l
  )"

  if ! test 0 == "${duplicate_count}"; then
    error "${duplicate_count} duplicate words; ${occurrences} total occurrences" 
    for word in ${duplicates}; do
      error "- '${word}' ($(
        grep "${word}" <<< "${duplicates}" | wc -l 
      ))"
    done

    ret=3
  fi

  blank_count="$( sed -E 's/[0-9]{5}\s*//' "${tmp_file}" | grep -v . | wc -l )"

  if ! test 0 == "${blank_count}"; then
    error "Blank words detected.  (${blank_count})"
    ret=4
  fi

  bad_line_count="$( grep -vE "^[0-9]{4,5}\s*." "${tmp_file}" | wc -l)"

  if ! test 0 == "${bad_line_count}"; then
    error "${bad_line_count} malformed lines."
    ret=5
  fi

  right_numbers_5d6=()
  for number in {1..6}{1..6}{1..6}{1..6}{1..6}; do
    right_numbers_5d6+=( "${number}" )
  done
  right_numbers_4d6=()
  for number in {1..6}{1..6}{1..6}{1..6}; do
    right_numbers_4d6+=( "${number}" )
  done

  recorded_numbers=()
  while read number; do
    recorded_numbers+=( "${number}" )
  done <<< "$(
    awk '{print $1}' "${tmp_file}" \
    | sort
  )"

  for (( i=0; i < ${#recorded_numbers[@]}; i++ )); do
    if 
      ! test "${recorded_numbers[i]}" == "${right_numbers_5d6[i]}" \
      && ! test "${recorded_numbers[i]}" == "${right_numbers_4d6[i]}"
    then
      error "Missing index:  ${right_numbers_5d6[i]} (found: ${recorded_numbers[i]})"
      ret=6
      break
    fi
  done

  return "${ret}"
}


function output {
  printf '%s\n' "${short_invocation}:  ${1}"
}


function ask {
  read -p "$( output "${1}" ) " "${2}"
}


function error {
  output "ERROR:  ${1}"
}


function warn {
  output "WARNING:  ${1}"
}


function fail {
  error "${1}"
  exit "${2:-1}"
}


short_invocation="$( sed 's/[^/]*\///g' <<< "${0}" )"

main "${@}"
